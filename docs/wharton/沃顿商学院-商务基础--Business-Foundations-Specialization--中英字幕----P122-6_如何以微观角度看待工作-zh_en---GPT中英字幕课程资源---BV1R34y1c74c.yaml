- en: 沃顿商学院《商务基础》｜Business Foundations Specialization｜（中英字幕） - P122：6_如何以微观角度看待工作.zh_en
    - GPT中英字幕课程资源 - BV1R34y1c74c
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this module， we will look at the operations of a process at the very micro
    level。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_1.png)'
  prefs: []
  type: TYPE_IMG
- en: We get our stopwatch and look second by second on how people work。
  prefs: []
  type: TYPE_NORMAL
- en: The case study I have picked for this module is Subway Restaurants。
  prefs: []
  type: TYPE_NORMAL
- en: I somewhat assume that all of you have eaten in a Subway restaurant or similar
    venues。
  prefs: []
  type: TYPE_NORMAL
- en: so it should make for a good case study。 I also assume that every one of us
    has made a sandwich for ourselves。
  prefs: []
  type: TYPE_NORMAL
- en: Now unless you are a professional cook or have a big family。
  prefs: []
  type: TYPE_NORMAL
- en: your experience is all about making one sandwich at a time。 How long does it
    take you？
  prefs: []
  type: TYPE_NORMAL
- en: What is your processing time？ How long does it take you to slice the bread？
  prefs: []
  type: TYPE_NORMAL
- en: Here's some official Subway information of how long it takes to make a sandwich。
  prefs: []
  type: TYPE_NORMAL
- en: This will vary a bit by sandwich and employee， but， let's just take these numbers
    as given for now。
  prefs: []
  type: TYPE_NORMAL
- en: We see that we have a grand total of 120 seconds of work per sandwich。 That
    is two minutes。
  prefs: []
  type: TYPE_NORMAL
- en: In other words， one employee could make a sandwich every two minutes。
  prefs: []
  type: TYPE_NORMAL
- en: which is equal to 30 sandwiches an hour。 That's the employee's capacity。
  prefs: []
  type: TYPE_NORMAL
- en: But what would Subway do when demand is higher than this？ Maybe 80 or even 100
    sandwiches per hour。
  prefs: []
  type: TYPE_NORMAL
- en: which are common numbers during busy lunch times。 Well。
  prefs: []
  type: TYPE_NORMAL
- en: they certainly need more employees to do this， but， how should we organize the
    workflow？
  prefs: []
  type: TYPE_NORMAL
- en: Save me higher two more employees， so they now have three。
  prefs: []
  type: TYPE_NORMAL
- en: One thing that they could do is that each of the three employees serves。
  prefs: []
  type: TYPE_NORMAL
- en: the customer from beginning to end， from grading the customer all the way to
    checkout。
  prefs: []
  type: TYPE_NORMAL
- en: Each employee would then take 120 seconds to serve a customer。 Interestingly。
  prefs: []
  type: TYPE_NORMAL
- en: that is not the process that they use。 And we later on would understand the
    logic behind this。
  prefs: []
  type: TYPE_NORMAL
- en: For now， here's what they're actually doing。 Take a look。 What Subway does is
    here。
  prefs: []
  type: TYPE_NORMAL
- en: rather than having one person， doing the whole thing， making the whole sandwich。
  prefs: []
  type: TYPE_NORMAL
- en: there are three people involved in the job。 They're really setting up a mini
    assembly line of sandwiches consisting of employee one。
  prefs: []
  type: TYPE_NORMAL
- en: two， and three。 Each of them has their hands in our sandwich， yummy。
  prefs: []
  type: TYPE_NORMAL
- en: So the first employee is greeting the customer， and then employee one does all。
  prefs: []
  type: TYPE_NORMAL
- en: the things after putting the cheese on the sandwich。 Then the second employee
    takes over， and。
  prefs: []
  type: TYPE_NORMAL
- en: that person starts with putting on the onions and goes all the way up to wrapping。
  prefs: []
  type: TYPE_NORMAL
- en: up and begging the sandwich。 And then the third employee is gonna offer the
    fresh value meal and。
  prefs: []
  type: TYPE_NORMAL
- en: then rings out the cash register。 That completes one customer。 So for now。
  prefs: []
  type: TYPE_NORMAL
- en: let's see the numbers here， these processing times I exact。
  prefs: []
  type: TYPE_NORMAL
- en: I know this is a very mechanical view to the world， but as you will see， it
    is a good start。
  prefs: []
  type: TYPE_NORMAL
- en: It takes exactly these 12 seconds to put on the meat。
  prefs: []
  type: TYPE_NORMAL
- en: It takes 37 seconds per sandwich per unit per guest at employee number one。
  prefs: []
  type: TYPE_NORMAL
- en: The processing time is 46 seconds per unit for the employee number two and。
  prefs: []
  type: TYPE_NORMAL
- en: 37 seconds per unit at employee number three。 So these are the processing times。
  prefs: []
  type: TYPE_NORMAL
- en: Here's what I want you to do。 I want you to draw me a process flow diagram of
    this subreassembly line for。
  prefs: []
  type: TYPE_NORMAL
- en: sandwiches。 And then I want you to think about the capacity of this process。
    As usual。
  prefs: []
  type: TYPE_NORMAL
- en: put me on hold， pause me， and then see how far you can get this done by， yourself。
    All right。
  prefs: []
  type: TYPE_NORMAL
- en: here we go。 Let's look at this together。 Let's start by drawing the process
    flow diagram。
  prefs: []
  type: TYPE_NORMAL
- en: For the process flow diagram， we start out with a triangle of waiting customers。
  prefs: []
  type: TYPE_NORMAL
- en: So that's a triangle。 Then comes the first box， the first resource。
  prefs: []
  type: TYPE_NORMAL
- en: That's going to be employee number one。 There could be a buffer then。
  prefs: []
  type: TYPE_NORMAL
- en: We have employee number two afterwards。 So that's the second resource， the second
    box。
  prefs: []
  type: TYPE_NORMAL
- en: And after that， there's another buffer。 And that is the other employee number
    three。
  prefs: []
  type: TYPE_NORMAL
- en: And that completes the process flow diagram。 So we have three resources。 Next
    up。
  prefs: []
  type: TYPE_NORMAL
- en: I want you to think about the capacity of this process。 For the capacity of
    the process。
  prefs: []
  type: TYPE_NORMAL
- en: I have to find the bottleneck。 There's going to be one of these three workers。
  prefs: []
  type: TYPE_NORMAL
- en: Each of them has a capacity。 We're going to find it by taking one over the processing
    time。
  prefs: []
  type: TYPE_NORMAL
- en: So one over 37 is a capacity of the first worker。 And that is in sandwiches
    per second。
  prefs: []
  type: TYPE_NORMAL
- en: One over 46 sandwiches per second is a capacity of the second yield。 And one
    over 37 is the third。
  prefs: []
  type: TYPE_NORMAL
- en: So we see here that the lowest number is one over 46。 And so that is by definition
    our bottleneck。
  prefs: []
  type: TYPE_NORMAL
- en: Rather than messing around with mental maps。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_3.png)'
  prefs: []
  type: TYPE_IMG
- en: let's switch over into Excel and do this on a spreadsheet。 We have the three
    workers。
  prefs: []
  type: TYPE_NORMAL
- en: That's three resources here。 And each of them has a processing time。 And remember
    those were 37， 46。
  prefs: []
  type: TYPE_NORMAL
- en: 37 seconds per unit。 Let's make sure we keep track of the units here。
  prefs: []
  type: TYPE_NORMAL
- en: These are all in seconds per unit。 Now the capacity we set is simply one over
    the processing time。
  prefs: []
  type: TYPE_NORMAL
- en: So one over 37。 And that is 0。02727。 That's a really hard to interpret number。
  prefs: []
  type: TYPE_NORMAL
- en: This is expressed now in units per second。 And to make it easier to interpret，
    I would suggest。
  prefs: []
  type: TYPE_NORMAL
- en: we just convert it to units per hour。 We do this by simply multiplying this
    number by 3600， right？
  prefs: []
  type: TYPE_NORMAL
- en: 3600 seconds in an hour。 And 97 sandwiches per hour is a number that， is much
    easier to interpret。
  prefs: []
  type: TYPE_NORMAL
- en: So remember then the process capacity reset， the process capacity is simply
    the minimum。
  prefs: []
  type: TYPE_NORMAL
- en: of these individual capacity levels。 That was the whole idea of the bottleneck。
    The bottleneck。
  prefs: []
  type: TYPE_NORMAL
- en: not surprisingly， is at station number two。 And the process capacity is 78 units
    per hour。
  prefs: []
  type: TYPE_NORMAL
- en: From there， the next thing that we， want to think about is flow rate。 Flow rate，
    we said。
  prefs: []
  type: TYPE_NORMAL
- en: was the minimum of demand and capacity。 So we need to make an assumption about
    the demand rate。
  prefs: []
  type: TYPE_NORMAL
- en: Let's see for now， the demand is 100 sandwiches per hour。
  prefs: []
  type: TYPE_NORMAL
- en: And so that means our flow rate is the law of these two， numbers。
  prefs: []
  type: TYPE_NORMAL
- en: But the minimum between demand and capacity and the flow rate。
  prefs: []
  type: TYPE_NORMAL
- en: now is this going to be 78 units per hour。 We also talked about the idea of
    utilization。
  prefs: []
  type: TYPE_NORMAL
- en: So for utilization， I'm taking my flow rate。 So I'm fixing the 78， and I fix
    them in Excel。
  prefs: []
  type: TYPE_NORMAL
- en: by pressing the dollar sign。 And I'm dividing it by the capacity。
  prefs: []
  type: TYPE_NORMAL
- en: So that means my first resource has a utilization of about 80%。
  prefs: []
  type: TYPE_NORMAL
- en: And then the other resources have a utilization of 100%， and 80% respectively。
  prefs: []
  type: TYPE_NORMAL
- en: Now just for intuition building， imagine my demand rate， would go down。
  prefs: []
  type: TYPE_NORMAL
- en: Say we have a demand of 50 customers per hour。 Then my utilization， even at
    the bottleneck。
  prefs: []
  type: TYPE_NORMAL
- en: would decrease to a value that is less than 1。 In fact， with the demand of 50，
    it。
  prefs: []
  type: TYPE_NORMAL
- en: would do down as you see here to about 63%。 But for now， let's not worry about
    that。
  prefs: []
  type: TYPE_NORMAL
- en: Let's go back to the base case of demand being 100。
  prefs: []
  type: TYPE_NORMAL
- en: So we have a utilization of 100% at the bottleneck， and about 80% at the other
    two resources。
  prefs: []
  type: TYPE_NORMAL
- en: Next up， I want to define a new measure。 I will define the new measure as the
    cycle time。
  prefs: []
  type: TYPE_NORMAL
- en: Let me define cycle time as 1 over the flow rate。 Let's be very careful with
    the units here。
  prefs: []
  type: TYPE_NORMAL
- en: I've been a little sloppy in the last row， skipping track of the units。
  prefs: []
  type: TYPE_NORMAL
- en: Flow rate is measured in units per hour。 And so my cycle time since it's 1 over
    the flow rate。
  prefs: []
  type: TYPE_NORMAL
- en: is now hours per unit。 Now 0。012778 hours go by between two sandwiches。
  prefs: []
  type: TYPE_NORMAL
- en: It's a little hard to interpret。 So I suggest we just convert this back into
    seconds。
  prefs: []
  type: TYPE_NORMAL
- en: and we divide the 3，600 seconds of the hour by 78 sandwiches。
  prefs: []
  type: TYPE_NORMAL
- en: Now we see something that I hope is intuitive， as we are now back to our seconds
    per unit。
  prefs: []
  type: TYPE_NORMAL
- en: our cycle time is 46 seconds per unit。 And that means we're making a sandwich
    every 46 seconds。
  prefs: []
  type: TYPE_NORMAL
- en: So work repeats itself。 We are cycling through every 46 seconds， to make a new
    sandwich。
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the cycle time， I want， to ask you another question。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_5.png)'
  prefs: []
  type: TYPE_IMG
- en: Imagine we have a school bus with 20 hungry kids， arrive at a subway restaurant。
  prefs: []
  type: TYPE_NORMAL
- en: Every kid wants one sandwich， and right now the restaurant， is still really
    empty。
  prefs: []
  type: TYPE_NORMAL
- en: How long will it take to please the crowd？ How long will it take to make 20
    sandwiches starting。
  prefs: []
  type: TYPE_NORMAL
- en: with an empty process？ This is harder than it sounds。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_7.png)'
  prefs: []
  type: TYPE_IMG
- en: So let's think about this systematically。 How long will it take to feed the
    first kid？ Well。
  prefs: []
  type: TYPE_NORMAL
- en: the first kid， the first customer in order to be served。
  prefs: []
  type: TYPE_NORMAL
- en: we need to basically go through all three steps--， 37 seconds at station one，
    46 at station two。
  prefs: []
  type: TYPE_NORMAL
- en: and 37 at station three。 Now how much later will we please the second customer？
    Think about that。
  prefs: []
  type: TYPE_NORMAL
- en: The second customer will come out 46 seconds later。
  prefs: []
  type: TYPE_NORMAL
- en: And another 46 seconds later comes out the third customer。 So from then onwards。
  prefs: []
  type: TYPE_NORMAL
- en: we are completing a customer order， every 46 seconds。 That is exactly the idea
    of cycle time。
  prefs: []
  type: TYPE_NORMAL
- en: So to please the crowd of 20 customers， to feed 20 customers， we're going。
  prefs: []
  type: TYPE_NORMAL
- en: to have to feed the first one。 And then 19 times more， we're going。
  prefs: []
  type: TYPE_NORMAL
- en: to go through the cycle time to have completed， the total order of 20 units。
  prefs: []
  type: TYPE_NORMAL
- en: That will be after 994 seconds。 Before advancing further， I would。
  prefs: []
  type: TYPE_NORMAL
- en: like to review the calculations that we did in Excel。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_9.png)'
  prefs: []
  type: TYPE_IMG
- en: a moment ago。 Remember， we have these three resources， with processing times
    37， 46。
  prefs: []
  type: TYPE_NORMAL
- en: and 37 seconds per unit。 I try to visualize this here in this graph with 37，
    46， and 37 SEs bars。
  prefs: []
  type: TYPE_NORMAL
- en: We can imagine already that station two， is going to be the bottleneck， but
    that。
  prefs: []
  type: TYPE_NORMAL
- en: would be jumping ahead。 The bottleneck is defined based on capacity， not based
    on processing time。
  prefs: []
  type: TYPE_NORMAL
- en: So to find the capacity of a resource， we look at the number of parallel servers
    at that resource。
  prefs: []
  type: TYPE_NORMAL
- en: M divided by the processing time。 Now here， each resource， each station。
  prefs: []
  type: TYPE_NORMAL
- en: is really stuffed by one employee。 And so my capacity level is 1/37。
  prefs: []
  type: TYPE_NORMAL
- en: and that is expressed in sandwiches per second， 1/46， and 1/37。
  prefs: []
  type: TYPE_NORMAL
- en: That makes this step here the lowest number， and so employee 2 is going to be
    the bottleneck。
  prefs: []
  type: TYPE_NORMAL
- en: So my process capacity is 10， 1/46， and it's 10， which is 10， which is 10， which
    is 10。 For now。
  prefs: []
  type: TYPE_NORMAL
- en: I want to leave it in seconds， as opposed to converting it to hours。
  prefs: []
  type: TYPE_NORMAL
- en: as I did in the excess spreadsheet， and you will see why in just a moment。
  prefs: []
  type: TYPE_NORMAL
- en: That gives me my process capacity， and we assume there's plenty of demand。 So
    my flow rate is。
  prefs: []
  type: TYPE_NORMAL
- en: as usual， minimum between demand， and process capacity。
  prefs: []
  type: TYPE_NORMAL
- en: And this is going to be driven by the capacity， of the bottleneck。 Next up。
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to look at the utilization， and the utilization is the flow rate，
    which。
  prefs: []
  type: TYPE_NORMAL
- en: is going to be 1/46， divided by the capacity levels。 And so for the first resource，
    that's。
  prefs: []
  type: TYPE_NORMAL
- en: going to be 1/46， divided by 1/37， and that means 37 divided by 46。 For the
    second resource。
  prefs: []
  type: TYPE_NORMAL
- en: it is 1/46， again， flow rate， divided by capacity， which is also 1/46。
  prefs: []
  type: TYPE_NORMAL
- en: So the utilization there is 1。 And then for the third employee， it's again 1/46，
    divided by 1/37。
  prefs: []
  type: TYPE_NORMAL
- en: and that gives me again， 37 divided by 46， which we said is around 80%。 Next。
  prefs: []
  type: TYPE_NORMAL
- en: let's look at the cycle time， which is what we said， was 1 over the flow rate。
  prefs: []
  type: TYPE_NORMAL
- en: And here's why I didn't convert it into hours。 If you write it this way， it's
    quite simple。
  prefs: []
  type: TYPE_NORMAL
- en: The cycle time is simply 1 over the flow rate， and the flow rate was 1 over
    46。
  prefs: []
  type: TYPE_NORMAL
- en: So all that combined gives us the cycle time of 46 seconds， per sandwich。 Every
    46 seconds。
  prefs: []
  type: TYPE_NORMAL
- en: life repeats itself。 And then finally， to make 20 units starting， with an empty
    process。
  prefs: []
  type: TYPE_NORMAL
- en: we have to first produce the first， sandwich。 And for the first sandwich。
  prefs: []
  type: TYPE_NORMAL
- en: it's going to take us 37 plus 46， plus 37， which together gets us 120 seconds。
    So after 120 seconds。
  prefs: []
  type: TYPE_NORMAL
- en: we have one sandwich。 So now we need 19 times an additional sandwich。 And guess
    what？
  prefs: []
  type: TYPE_NORMAL
- en: We're making those on a 46 second cycle。 So we have 120 plus 19 times 46， which。
  prefs: []
  type: TYPE_NORMAL
- en: gets us to the 994 seconds。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_11.png)'
  prefs: []
  type: TYPE_IMG
- en: So far， with the sub-week， it's remaining repeated， our capacity calculation。
  prefs: []
  type: TYPE_NORMAL
- en: I also introduced the concept of cycle time。 Please be careful with the word
    cycle time。
  prefs: []
  type: TYPE_NORMAL
- en: I've seen it used very differently across the industry。 Most importantly。
  prefs: []
  type: TYPE_NORMAL
- en: I've come across some companies， that use the word cycle time for what we call
    flow time。 Now。
  prefs: []
  type: TYPE_NORMAL
- en: not surprisingly， I think my definition is the right one。 The word cycle time，
    in my view。
  prefs: []
  type: TYPE_NORMAL
- en: captures the idea of a cycle。 Every 46 seconds， a process in our sub-week case，
    repeats itself。
  prefs: []
  type: TYPE_NORMAL
- en: Every 46 seconds， a new cycle begins。 The cycle time is particularly useful
    for processes。
  prefs: []
  type: TYPE_NORMAL
- en: with discrete flow units。 I wouldn't use a concept in an oil refinery or brewery。
  prefs: []
  type: TYPE_NORMAL
- en: It just works better when you're dealing with customers， or widgets or sandwiches。
  prefs: []
  type: TYPE_NORMAL
- en: The cycle time helps us find how long it would take， to produce a certain number
    of units starting。
  prefs: []
  type: TYPE_NORMAL
- en: with an empty system。 As we will see， the cycle time also。
  prefs: []
  type: TYPE_NORMAL
- en: will be at the heart of some further productivity calculations。 Speaking of
    further calculations。
  prefs: []
  type: TYPE_NORMAL
- en: in the next video， we'll talk more about the importance of a labor productivity。
  prefs: []
  type: TYPE_NORMAL
- en: I will introduce two new measures， and then we will link those to financial
    performance。
  prefs: []
  type: TYPE_NORMAL
- en: See you then。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0666a326ed95c92f136476308ebcad92_13.png)'
  prefs: []
  type: TYPE_IMG
- en: '[BLANK_AUDIO]。'
  prefs: []
  type: TYPE_NORMAL
