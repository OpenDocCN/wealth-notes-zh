- en: 沃顿商学院《商务基础》｜Business Foundations Specialization｜（中英字幕） - P130：14_实现流程的顺畅流动.zh_en
    - GPT中英字幕课程资源 - BV1R34y1c74c
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the privileges of being a Warren professor is that I get to work with
    some really smart。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4af8f837844be991129b3e5d08e124_1.png)'
  prefs: []
  type: TYPE_IMG
- en: doctoral students。 My students are my collaborators in research and more often
    than not they're also my teaching。
  prefs: []
  type: TYPE_NORMAL
- en: assistants in my class。 At this point I should confess that it's really my teaching
    assistants who grade the。
  prefs: []
  type: TYPE_NORMAL
- en: final exam。 The exam consists of a dozen or so questions， each of which has
    two， three。
  prefs: []
  type: TYPE_NORMAL
- en: four sub questions。 So let's look at how the TAs organize the grading process。
  prefs: []
  type: TYPE_NORMAL
- en: Here's a picture of two of my favorite doctoral students， Leslie Meng， now on
    the faculty， at Yale。
  prefs: []
  type: TYPE_NORMAL
- en: and Dawson Coward， now on the faculty of Georgetown。
  prefs: []
  type: TYPE_NORMAL
- en: Leslie and Dawson were grading exams on this day， about 120 of them。
  prefs: []
  type: TYPE_NORMAL
- en: Not surprisingly they had to split up the work between the two of them and you
    see how each。
  prefs: []
  type: TYPE_NORMAL
- en: of them is grading about 60 exams。 What do you notice when looking at this picture？
  prefs: []
  type: TYPE_NORMAL
- en: First we see that Dawson has 60 exams in front of him。 All of them are turned
    on a particular page。
  prefs: []
  type: TYPE_NORMAL
- en: Leslie in contrast has only one exam in front of her and she has one stack of
    exams to。
  prefs: []
  type: TYPE_NORMAL
- en: her left and one stack to her right。 Can you imagine what they do differently？
  prefs: []
  type: TYPE_NORMAL
- en: Well let's start with Leslie。 Leslie picks up an exam， goes to the exam from
    beginning to end。
  prefs: []
  type: TYPE_NORMAL
- en: and then enters the， exam score into a table。 One exam after the other until
    all of them are fully graded。
  prefs: []
  type: TYPE_NORMAL
- en: Make sense？ Doesn't it？ Look at Dawson。 Dawson starts with question one。
  prefs: []
  type: TYPE_NORMAL
- en: say question one has three sub questions， and then Dawson， grades question one
    for all the exams。
  prefs: []
  type: TYPE_NORMAL
- en: Then he moves to question two and repeats the whole thing。 Ask yourself for
    a moment。
  prefs: []
  type: TYPE_NORMAL
- en: What are the pros and cons of the two strategies？ Now since few of you will
    be entering the exam grading business。
  prefs: []
  type: TYPE_NORMAL
- en: I want to generalize， this example and talk about a flow units journey through
    a process。
  prefs: []
  type: TYPE_NORMAL
- en: What we've done so far in this course， we've simply assumed that the flow unit
    makes its。
  prefs: []
  type: TYPE_NORMAL
- en: way through the process whenever there's resources downstream that has capacity。
  prefs: []
  type: TYPE_NORMAL
- en: But how that flow unit is managed and what triggers a flow unit to advance is
    actually。
  prefs: []
  type: TYPE_NORMAL
- en: pretty important。 In this video I want to talk about three ways we can manage
    flow。
  prefs: []
  type: TYPE_NORMAL
- en: We first talk about push versus pull， including just in time deliveries。
  prefs: []
  type: TYPE_NORMAL
- en: We then talk about mix model production。 And finally we will talk about single
    unit flows as opposed to transport batches。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4af8f837844be991129b3e5d08e124_3.png)'
  prefs: []
  type: TYPE_IMG
- en: Imagine you have a three step process with the capacity levels that you see
    here。
  prefs: []
  type: TYPE_NORMAL
- en: You have enough input for that process and you have hard working and motivated
    employees。
  prefs: []
  type: TYPE_NORMAL
- en: What's going to happen？ Well it's clear that station two here is the bottleneck。
  prefs: []
  type: TYPE_NORMAL
- en: Since station one is motivated and works really hard， he or she is going to
    push units into。
  prefs: []
  type: TYPE_NORMAL
- en: the process。 All of them are going to pile up in front of station two。
  prefs: []
  type: TYPE_NORMAL
- en: This really doesn't help the flow rate because the capacity constraint is at
    station two。
  prefs: []
  type: TYPE_NORMAL
- en: but it will increase the inventory。 In a setting like this。
  prefs: []
  type: TYPE_NORMAL
- en: what we really want is station one to slow down。 We prefer station one to be
    idle for half of the time as opposed to just flooding the。
  prefs: []
  type: TYPE_NORMAL
- en: process by pushing in more inventory。 You might say that we could send the work
    out station home after we completed a pile of。
  prefs: []
  type: TYPE_NORMAL
- en: inventory at station one in the first half of the day。 There's certainly some
    truth to that。
  prefs: []
  type: TYPE_NORMAL
- en: but the problem is it's certainly not lean。 Because now we have a pile of inventory
    between station one and two。
  prefs: []
  type: TYPE_NORMAL
- en: Instead what we should do is we should pay the process based on the speed of
    the bottleneck。
  prefs: []
  type: TYPE_NORMAL
- en: Even better， we should think about how we can pace this process based on the
    speed of demand。
  prefs: []
  type: TYPE_NORMAL
- en: Remember the concept of tag time。 We should operate at the tag of demand。 Now
    ideally。
  prefs: []
  type: TYPE_NORMAL
- en: we would also balance the line so that big differences in capacity levels。
  prefs: []
  type: TYPE_NORMAL
- en: would not occur in the first place， but you will just never get a perfect line
    balance。
  prefs: []
  type: TYPE_NORMAL
- en: So what can we do to avoid undesirable inventory buildup？
  prefs: []
  type: TYPE_NORMAL
- en: You have to really pull the work through the process from the downstream as
    opposed to pushing。
  prefs: []
  type: TYPE_NORMAL
- en: the work in from the upstream。 Now one way of achieving such a pull system is
    known as a conmances。
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you're sending these lovely black boxes here to the market。 For sake
    of argument。
  prefs: []
  type: TYPE_NORMAL
- en: say the downstream here is the last resource in the process。
  prefs: []
  type: TYPE_NORMAL
- en: Once you've depleted a certain amount of inventory of the boxes at the last
    resource， typically。
  prefs: []
  type: TYPE_NORMAL
- en: one container， you need to inform the upstream that you need more。
  prefs: []
  type: TYPE_NORMAL
- en: Connected to that container is a conman cart。 Once a container is empty。
  prefs: []
  type: TYPE_NORMAL
- en: that conman cart is going to be handed over to the station。
  prefs: []
  type: TYPE_NORMAL
- en: the resource upstream that is feeding you， your internal supplier。
  prefs: []
  type: TYPE_NORMAL
- en: Now that person or that resource feeding you should sit there idle and do nothing
    until。
  prefs: []
  type: TYPE_NORMAL
- en: they have received the conman cart。 That's why a conman cart is oftentimes referred
    to as a work authorization form。
  prefs: []
  type: TYPE_NORMAL
- en: Now again， it sounds really stupid because you're forcing people to be idle。
    But in the lean world。
  prefs: []
  type: TYPE_NORMAL
- en: it's better to be idle rather than having to run ahead and push， inventory into
    the system。
  prefs: []
  type: TYPE_NORMAL
- en: So through the conman carts， you really control how much inventory is in the
    system。
  prefs: []
  type: TYPE_NORMAL
- en: You authorize the amount of inventory。 Now the extreme version of that approach
    to pulling work is you have a conman cart for。
  prefs: []
  type: TYPE_NORMAL
- en: every single flow unit。 That means a container size is really equal to one。
  prefs: []
  type: TYPE_NORMAL
- en: And every unit is now replenished one by one。 Consider for example the replenishment
    of complex modules such as seeds or dashboards or。
  prefs: []
  type: TYPE_NORMAL
- en: exhaust systems in an automotive plant。 It's fascinating to see how when the
    vehicle enters a certain point in the production。
  prefs: []
  type: TYPE_NORMAL
- en: say the painter， there's an electronic signal that is sent to the supplier requesting
    the。
  prefs: []
  type: TYPE_NORMAL
- en: modules for the final assembly。 And then the supplier has something like three
    or four hours to basically go through their。
  prefs: []
  type: TYPE_NORMAL
- en: operation of making the module， putting it on a truck and delivering it to the
    final assembly， line。
  prefs: []
  type: TYPE_NORMAL
- en: And then magically just when your vehicle that is in need of the seat is at
    station 255 seat。
  prefs: []
  type: TYPE_NORMAL
- en: assembly that pops up just in time。 So this is real just in time often referred
    to as synchronised production。
  prefs: []
  type: TYPE_NORMAL
- en: Next let's talk about the idea of mixed motor production。 Remember Dawson the
    TA。
  prefs: []
  type: TYPE_NORMAL
- en: Why did he like to grade all the exams on question one before grading all the
    exam on， question two？
  prefs: []
  type: TYPE_NORMAL
- en: The reason for that is what in operations we call a setup time or a switching
    time。
  prefs: []
  type: TYPE_NORMAL
- en: If you've watched my module on product variety in multiple flow units you might
    remember。
  prefs: []
  type: TYPE_NORMAL
- en: the idea of setups and that they require capacity。
  prefs: []
  type: TYPE_NORMAL
- en: Imagine an automotive plant that is producing two types of cars， a wagon and
    a sedan。
  prefs: []
  type: TYPE_NORMAL
- en: Since the body panels of a wagon are different from the body panels of a sedan，
    some of the。
  prefs: []
  type: TYPE_NORMAL
- en: stamping machines need to be retooled as you switch over。
  prefs: []
  type: TYPE_NORMAL
- en: The operator is having to do something that is called a changeover。
  prefs: []
  type: TYPE_NORMAL
- en: Think about making cookies for exams， you're baking cookies and you're switching
    over between。
  prefs: []
  type: TYPE_NORMAL
- en: making cookies in the shape of a star and sometimes you make cookies in the
    shape of， a heart。
  prefs: []
  type: TYPE_NORMAL
- en: The problem of course is that changing over a stamping machine that is as big
    as my house。
  prefs: []
  type: TYPE_NORMAL
- en: and a stamping dies which weigh multiple tones of steel。
  prefs: []
  type: TYPE_NORMAL
- en: Well that is much harder than switching over from a star cookie cutter to a
    heart cookie， cutter。
  prefs: []
  type: TYPE_NORMAL
- en: So setups and changeovers create a form of scale economies which is really a
    form of specialization。
  prefs: []
  type: TYPE_NORMAL
- en: This is by no means unique to an auto plant as we saw again with my TA example。
  prefs: []
  type: TYPE_NORMAL
- en: You might also think about a surgeon who might find it easier to do six miniscule
    surgeries。
  prefs: []
  type: TYPE_NORMAL
- en: in a row as opposed to doing a knee surgery， then a hip surgery and then doing
    an anchor， surgery。
  prefs: []
  type: TYPE_NORMAL
- en: People like specialization， people like scale economies。 Anyway， back to my
    auto example。
  prefs: []
  type: TYPE_NORMAL
- en: Even that retooling is hard and will really eat up my production capacity。
  prefs: []
  type: TYPE_NORMAL
- en: The plant manager doesn't want to switch forth and back between sedan and wagons
    all too， often。
  prefs: []
  type: TYPE_NORMAL
- en: So he or she does what Dawson did。 He or she runs a long production run of sedans。
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose the amount for sedans and the amount for wagons is about split evenly
    50-50。
  prefs: []
  type: TYPE_NORMAL
- en: What happens？ While we're producing sedans， we're not producing wagons。
  prefs: []
  type: TYPE_NORMAL
- en: So any sedans from wagons has to come from inventory。
  prefs: []
  type: TYPE_NORMAL
- en: So wagon inventory is coming down and in contents since we're allocating all
    our capacity to。
  prefs: []
  type: TYPE_NORMAL
- en: sedans， the sedan inventory is going up。 Then eventually we'll switch from producing
    sedans to producing wagons and the opposite。
  prefs: []
  type: TYPE_NORMAL
- en: occurs。 Now the sedan inventory is coming down， the wagon inventory is going
    up。
  prefs: []
  type: TYPE_NORMAL
- en: You see the resulting oscillation here， the up and down of the inventory cycles。
    And on average。
  prefs: []
  type: TYPE_NORMAL
- en: the inventory is exactly going to be in the middle。
  prefs: []
  type: TYPE_NORMAL
- en: Now contrast that with the plant that is able to change over production with
    less effort。
  prefs: []
  type: TYPE_NORMAL
- en: or even without any effort at all。 With smaller ultimately no change over time，
    what would you do？
  prefs: []
  type: TYPE_NORMAL
- en: Exactly。 We will produce at the rate of demand。 And since we assume that demand
    for wagon's incidents would be evenly split。
  prefs: []
  type: TYPE_NORMAL
- en: we produce， in much smaller batches and ultimately if there are no change over
    time。
  prefs: []
  type: TYPE_NORMAL
- en: we will produce， in batch sizes of one。 The technical term for this is a mixed
    model production。
  prefs: []
  type: TYPE_NORMAL
- en: also known as Hejungka。 Hejungka helps us keep inventory low。 It also has another
    nice property。
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you're rolling the processes to install the trunk opening mechanism
    which。
  prefs: []
  type: TYPE_NORMAL
- en: is specific and unique only for the wagon。 That means that when the plant is
    producing wagons。
  prefs: []
  type: TYPE_NORMAL
- en: you're running all out。 But then once the plant switches over to sedans。
  prefs: []
  type: TYPE_NORMAL
- en: you really have plenty of idle time。 You alternate between all outsprens and
    leisurely walks。
  prefs: []
  type: TYPE_NORMAL
- en: In contrast with mixed model production， you'll work on this level， right？
  prefs: []
  type: TYPE_NORMAL
- en: That employee putting in the trunk opener simply works on every other car。
  prefs: []
  type: TYPE_NORMAL
- en: So the moment you do Hejungka， work starts to be much more level。
  prefs: []
  type: TYPE_NORMAL
- en: I know that by now you're probably sick and tired of my Hejungka quotes， but
    here's one， last one。
  prefs: []
  type: TYPE_NORMAL
- en: Run like the turtles， not the hair。 This advice is really based on the ancient
    fable describing the race between the hair。
  prefs: []
  type: TYPE_NORMAL
- en: and the turtles。 The hair really cools the slow moving turtles which challenges
    the hair to a race。
  prefs: []
  type: TYPE_NORMAL
- en: And in the race， the hair quickly gains a significant lead and hence the hair
    is comfortable taking。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4af8f837844be991129b3e5d08e124_5.png)'
  prefs: []
  type: TYPE_IMG
- en: a little nap even in the middle of the race。 The turtles though， tired as it
    is。
  prefs: []
  type: TYPE_NORMAL
- en: keeps on growing at a steady and even pace。 When the hair eventually wakes up。
  prefs: []
  type: TYPE_NORMAL
- en: the hair is so far behind that all the hair does is， see how the turtles springs
    into victory。
  prefs: []
  type: TYPE_NORMAL
- en: Unless you control your processes， processes have the tendency to operate like
    the hair。
  prefs: []
  type: TYPE_NORMAL
- en: Your resources are motivated and so whatever they do， everything is pushed into
    the process。
  prefs: []
  type: TYPE_NORMAL
- en: as quickly as possible。 This is especially true in service processes where it's
    the customers who push themselves。
  prefs: []
  type: TYPE_NORMAL
- en: forward。 But you have to run an operation at an even and steady pace。 Unlike
    the turtles。
  prefs: []
  type: TYPE_NORMAL
- en: not the hair。 That gets me to my third concept I wanted to talk about in this
    video here and that is。
  prefs: []
  type: TYPE_NORMAL
- en: the idea of single unit flows。 Because of these change over times。
  prefs: []
  type: TYPE_NORMAL
- en: we have a reason to create a production batch or production。
  prefs: []
  type: TYPE_NORMAL
- en: run consisting out of multiple flow units。 Now similarly。
  prefs: []
  type: TYPE_NORMAL
- en: if we have a significant transportation time between stations， we have an incentive。
  prefs: []
  type: TYPE_NORMAL
- en: to wait for units to pile up before we do the next transportation trip。
  prefs: []
  type: TYPE_NORMAL
- en: Just think about how you're buying stuff like toilet paper。
  prefs: []
  type: TYPE_NORMAL
- en: Even short of the COVID-19 toilet paper craziness， chances are that you don't
    buy toilet paper。
  prefs: []
  type: TYPE_NORMAL
- en: every day。 Despite the fact that you're probably using toilet paper every day。
  prefs: []
  type: TYPE_NORMAL
- en: You might purchase 10 rolls at your local supermarket。 You might purchase 100
    rolls at Costco。
  prefs: []
  type: TYPE_NORMAL
- en: Now buying 100 rolls of Costco toilet paper is likely to be cheaper and more
    convenient。
  prefs: []
  type: TYPE_NORMAL
- en: But if you do this， on average， you now have 50 rolls of toilet paper in the
    house。
  prefs: []
  type: TYPE_NORMAL
- en: The Toyota mindset is that if I consume one roll of toilet paper in my house
    every day。
  prefs: []
  type: TYPE_NORMAL
- en: I should be purchasing one roll of toilet paper every day。
  prefs: []
  type: TYPE_NORMAL
- en: If everybody would have followed this strategy， the March 2020 craziness around
    supermarket。
  prefs: []
  type: TYPE_NORMAL
- en: shares being emptied of toilet paper would certainly not have happened。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4af8f837844be991129b3e5d08e124_7.png)'
  prefs: []
  type: TYPE_IMG
- en: The idea of changing over from one model to the other every minute or two and
    the idea。
  prefs: []
  type: TYPE_NORMAL
- en: of replenishing your toilet paper run roll at a time sounds appealing from an
    inventory。
  prefs: []
  type: TYPE_NORMAL
- en: perspective but one that translated into lots of wasted production capacity
    and many。
  prefs: []
  type: TYPE_NORMAL
- en: trips to the supermarket。 Yes， that's a problem。 This gets me to my last insight
    in this video。
  prefs: []
  type: TYPE_NORMAL
- en: The key to implement a lean operation is not just to change your production
    plans or your。
  prefs: []
  type: TYPE_NORMAL
- en: planations and cycles。 Instead， you have to build processes that are flexible
    enough to support this。
  prefs: []
  type: TYPE_NORMAL
- en: You have to invest in flexible production equipment， you need to train your
    workforce。
  prefs: []
  type: TYPE_NORMAL
- en: and you need to involve your suppliers potentially asking them to build a plan
    next to yours。
  prefs: []
  type: TYPE_NORMAL
- en: This is why in the introduction module， I made inflexibility one of my three
    system inhibitors。
  prefs: []
  type: TYPE_NORMAL
- en: All this requires a much bigger transformation than you alone deciding that
    you， from tomorrow。
  prefs: []
  type: TYPE_NORMAL
- en: onwards， are going to run a lean operation。 In the next video。
  prefs: []
  type: TYPE_NORMAL
- en: we'll talk about how such a bigger transformation looks like。 I see you then。
    [BLANK_AUDIO]。
  prefs: []
  type: TYPE_NORMAL
